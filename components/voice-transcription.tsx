"use client"

import { useState, useRef, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import {
  Mic,
  MicOff,
  Download,
  Copy,
  Trash2,
  Save,
  Volume2,
  Pause,
  Play,
  FileText,
  Stethoscope,
  Plus,
  Edit,
  X,
} from "lucide-react"
import { useAuth } from "@/lib/auth-context"

interface TranscriptionSettings {
  language: string
  continuous: boolean
  interimResults: boolean
}

interface AnamnesisTemplate {
  id: string
  name: string
  sections: string[]
  description: string
  isCustom?: boolean
}

interface AnamnesisData {
  [key: string]: string
}

const defaultAnamnesisTemplates: AnamnesisTemplate[] = [
  {
    id: "general",
    name: "Anamnese Geral",
    sections: [
      "Identifica√ß√£o do Paciente",
      "Queixa Principal",
      "Hist√≥ria da Doen√ßa Atual",
      "Hist√≥ria M√©dica Pregressa",
      "Hist√≥ria Familiar",
      "Hist√≥ria Social",
      "Revis√£o de Sistemas",
      "Exame F√≠sico",
      "Hip√≥teses Diagn√≥sticas",
      "Plano Terap√™utico",
    ],
    description: "Modelo padr√£o para consultas gerais",
  },
  {
    id: "pediatric",
    name: "Anamnese Pedi√°trica",
    sections: [
      "Identifica√ß√£o da Crian√ßa",
      "Queixa Principal",
      "Hist√≥ria da Doen√ßa Atual",
      "Hist√≥ria Perinatal",
      "Desenvolvimento Neuropsicomotor",
      "Imuniza√ß√µes",
      "Hist√≥ria Familiar",
      "Hist√≥ria Social",
      "Exame F√≠sico Pedi√°trico",
      "Avalia√ß√£o do Crescimento",
      "Hip√≥teses Diagn√≥sticas",
      "Orienta√ß√µes aos Pais",
    ],
    description: "Especializado para consultas pedi√°tricas",
  },
  {
    id: "cardiology",
    name: "Anamnese Cardiol√≥gica",
    sections: [
      "Identifica√ß√£o do Paciente",
      "Queixa Principal",
      "Hist√≥ria da Doen√ßa Atual",
      "Sintomas Cardiovasculares",
      "Fatores de Risco Cardiovascular",
      "Hist√≥ria Familiar Cardiovascular",
      "Medica√ß√µes em Uso",
      "Exame F√≠sico Cardiovascular",
      "Ausculta Card√≠aca",
      "Avalia√ß√£o Vascular",
      "Hip√≥teses Diagn√≥sticas",
      "Plano de Investiga√ß√£o",
    ],
    description: "Focado em avalia√ß√£o cardiovascular",
  },
  {
    id: "psychiatric",
    name: "Anamnese Psiqui√°trica",
    sections: [
      "Identifica√ß√£o do Paciente",
      "Queixa Principal",
      "Hist√≥ria da Doen√ßa Atual",
      "Hist√≥ria Psiqui√°trica Pregressa",
      "Hist√≥ria Familiar Psiqui√°trica",
      "Hist√≥ria Social e Ocupacional",
      "Uso de Subst√¢ncias",
      "Exame do Estado Mental",
      "Avalia√ß√£o de Risco",
      "Hip√≥teses Diagn√≥sticas",
      "Plano Terap√™utico",
    ],
    description: "Especializado para avalia√ß√£o psiqui√°trica",
  },
]

export default function VoiceTranscription() {
  const { user } = useAuth()
  const [isListening, setIsListening] = useState(false)
  const [isPaused, setIsPaused] = useState(false)
  const [transcript, setTranscript] = useState("")
  const [interimTranscript, setInterimTranscript] = useState("")
  const [isSupported, setIsSupported] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [settings, setSettings] = useState<TranscriptionSettings>({
    language: "pt-BR",
    continuous: true,
    interimResults: true,
  })

  // Estados para anamnese
  const [anamnesisTemplates, setAnamnesisTemplates] = useState<AnamnesisTemplate[]>(defaultAnamnesisTemplates)
  const [selectedTemplate, setSelectedTemplate] = useState<AnamnesisTemplate | null>(null)
  const [anamnesisMode, setAnamnesisMode] = useState(false)
  const [anamnesisData, setAnamnesisData] = useState<AnamnesisData>({})
  const [formattedAnamnesis, setFormattedAnamnesis] = useState("")
  const [isProcessingAnamnesis, setIsProcessingAnamnesis] = useState(false)

  // Estados para cria√ß√£o/edi√ß√£o de templates
  const [showTemplateEditor, setShowTemplateEditor] = useState(false)
  const [editingTemplate, setEditingTemplate] = useState<AnamnesisTemplate | null>(null)
  const [newTemplateName, setNewTemplateName] = useState("")
  const [newTemplateDescription, setNewTemplateDescription] = useState("")
  const [newTemplateSections, setNewTemplateSections] = useState<string[]>([""])

  const recognitionRef = useRef<any>(null)
  const textareaRef = useRef<HTMLTextAreaElement>(null)

  // Carregar templates customizados do localStorage
  useEffect(() => {
    const savedTemplates = localStorage.getItem("custom-anamnesis-templates")
    if (savedTemplates) {
      const customTemplates = JSON.parse(savedTemplates)
      setAnamnesisTemplates([...defaultAnamnesisTemplates, ...customTemplates])
    }
  }, [])

  // Verificar suporte do navegador
  useEffect(() => {
    if (typeof window !== "undefined") {
      const SpeechRecognition = window.SpeechRecognition || (window as any).webkitSpeechRecognition
      setIsSupported(!!SpeechRecognition)

      if (SpeechRecognition) {
        recognitionRef.current = new SpeechRecognition()
        setupRecognition()
      }
    }
  }, [])

  // Processar transcri√ß√£o para anamnese quando o texto muda
  useEffect(() => {
    if (anamnesisMode && selectedTemplate && transcript.length > 50) {
      processAnamnesisFromTranscript()
    }
  }, [transcript, anamnesisMode, selectedTemplate])

  const setupRecognition = () => {
    if (!recognitionRef.current) return

    const recognition = recognitionRef.current

    recognition.continuous = settings.continuous
    recognition.interimResults = settings.interimResults
    recognition.lang = settings.language
    recognition.maxAlternatives = 1

    recognition.onstart = () => {
      setIsListening(true)
      setError(null)
      console.log("üé§ Transcri√ß√£o iniciada")
    }

    recognition.onresult = (event: any) => {
      let finalTranscript = ""
      let interimTranscript = ""

      for (let i = event.resultIndex; i < event.results.length; i++) {
        const transcript = event.results[i][0].transcript

        if (event.results[i].isFinal) {
          finalTranscript += transcript + " "
        } else {
          interimTranscript += transcript
        }
      }

      if (finalTranscript) {
        // Filtrar ru√≠dos e informa√ß√µes irrelevantes
        const cleanedTranscript = cleanTranscript(finalTranscript)
        setTranscript((prev) => prev + cleanedTranscript)
        setInterimTranscript("")
      } else {
        setInterimTranscript(interimTranscript)
      }
    }

    recognition.onerror = (event: any) => {
      console.error("Erro na transcri√ß√£o:", event.error)
      setError(`Erro: ${event.error}`)
      setIsListening(false)
    }

    recognition.onend = () => {
      setIsListening(false)
      setInterimTranscript("")
      console.log("üõë Transcri√ß√£o finalizada")
    }
  }

  // Fun√ß√£o para limpar ru√≠dos e informa√ß√µes irrelevantes do texto
  const cleanTranscript = (text: string): string => {
    // Lista de palavras e frases irrelevantes para filtrar
    const noiseWords = [
      // Cumprimentos e cortesias
      "bom dia",
      "boa tarde",
      "boa noite",
      "ol√°",
      "oi",
      "tchau",
      "at√© logo",
      "obrigado",
      "obrigada",
      "de nada",
      "por favor",
      "com licen√ßa",
      "desculpa",
      "desculpe",

      // Interjei√ß√µes e hesita√ß√µes
      "n√©",
      "ent√£o",
      "a√≠",
      "tipo",
      "assim",
      "sabe",
      "entende",
      "certo",
      "ok",
      "t√°",
      "t√° bom",
      "uhm",
      "ahm",
      "eh",
      "ah",
      "oh",
      "hm",
      "hmm",
      "ahn",
      "√©h",

      // Palavras de preenchimento
      "bem",
      "meio que",
      "mais ou menos",
      "sei l√°",
      "vai",
      "vamos",
      "deixa eu ver",
      "como √© que √©",
      "√© isso a√≠",
      "exato",
      "isso mesmo",
      "perfeito",

      // Ru√≠dos de conversa√ß√£o
      "pois √©",
      "√© verdade",
      "com certeza",
      "claro",
      "obviamente",
      "realmente",
      "na verdade",
      "ali√°s",
      "inclusive",
      "enfim",
      "resumindo",

      // Marcadores temporais irrelevantes
      "agora",
      "hoje",
      "ontem",
      "amanh√£",
      "depois",
      "antes",
      "j√°",
      "ainda",

      // Conectivos desnecess√°rios em excesso
      "e a√≠",
      "da√≠",
      "ent√£o assim",
      "tipo assim",
      "sabe como √©",
    ]

    // Padr√µes de ru√≠do para remover
    const noisePatterns = [
      /\b(ah+|eh+|oh+|hm+|uhm+|ahn+)\b/gi, // Interjei√ß√µes repetitivas
      /\b(n√©|sabe|entende|certo|ok|t√°)\s*\?/gi, // Perguntas ret√≥ricas
      /\b(ent√£o|a√≠|tipo|assim)\s+(ent√£o|a√≠|tipo|assim)/gi, // Repeti√ß√µes
      /\b(√©|foi|t√°|ok)\s*,?\s*\b/gi, // Confirma√ß√µes isoladas
      /\s{2,}/g, // M√∫ltiplos espa√ßos
    ]

    let cleanedText = text.toLowerCase()

    // Remover palavras de ru√≠do
    noiseWords.forEach((noise) => {
      const regex = new RegExp(`\\b${noise}\\b`, "gi")
      cleanedText = cleanedText.replace(regex, " ")
    })

    // Remover padr√µes de ru√≠do
    noisePatterns.forEach((pattern) => {
      cleanedText = cleanedText.replace(pattern, " ")
    })

    // Limpar espa√ßos extras e capitalizar primeira letra
    cleanedText = cleanedText
      .replace(/\s+/g, " ") // M√∫ltiplos espa√ßos para um
      .trim() // Remover espa√ßos das bordas
      .replace(/^\w/, (c) => c.toUpperCase()) // Capitalizar primeira letra

    // Se o texto ficou muito pequeno ap√≥s limpeza, retornar original
    if (cleanedText.length < text.length * 0.3) {
      return text
    }

    return cleanedText + " "
  }

  // Fun√ß√£o para processar a transcri√ß√£o e extrair dados da anamnese
  const processAnamnesisFromTranscript = async () => {
    if (!selectedTemplate || !transcript) return

    setIsProcessingAnamnesis(true)

    try {
      // Simula√ß√£o de processamento NLP (em produ√ß√£o, usaria uma API real)
      const processedData = await simulateNLPProcessing(transcript, selectedTemplate)
      setAnamnesisData(processedData)

      // Formatar anamnese
      const formatted = formatAnamnesis(processedData, selectedTemplate)
      setFormattedAnamnesis(formatted)
    } catch (error) {
      console.error("Erro ao processar anamnese:", error)
    } finally {
      setIsProcessingAnamnesis(false)
    }
  }

  // Simula√ß√£o de processamento NLP
  const simulateNLPProcessing = async (text: string, template: AnamnesisTemplate): Promise<AnamnesisData> => {
    // Simula delay de processamento
    await new Promise((resolve) => setTimeout(resolve, 1000))

    const data: AnamnesisData = {}
    const lowerText = text.toLowerCase()

    // Extra√ß√£o b√°sica baseada em palavras-chave (em produ√ß√£o seria mais sofisticado)
    template.sections.forEach((section) => {
      const sectionKey = section.toLowerCase()

      if (sectionKey.includes("identifica√ß√£o") || sectionKey.includes("paciente")) {
        data[section] = extractPatientInfo(lowerText)
      } else if (sectionKey.includes("queixa principal")) {
        data[section] = extractMainComplaint(lowerText)
      } else if (sectionKey.includes("hist√≥ria da doen√ßa atual") || sectionKey.includes("doen√ßa atual")) {
        data[section] = extractCurrentIllness(lowerText)
      } else if (sectionKey.includes("hist√≥ria m√©dica") || sectionKey.includes("pregressa")) {
        data[section] = extractMedicalHistory(lowerText)
      } else if (sectionKey.includes("hist√≥ria familiar")) {
        data[section] = extractFamilyHistory(lowerText)
      } else if (sectionKey.includes("exame f√≠sico")) {
        data[section] = extractPhysicalExam(lowerText)
      } else if (sectionKey.includes("sintomas")) {
        data[section] = extractSymptoms(lowerText)
      } else {
        // Para outras se√ß√µes, extrai trechos relevantes
        data[section] = extractRelevantText(lowerText, sectionKey)
      }
    })

    return data
  }

  // Fun√ß√µes auxiliares para extra√ß√£o de informa√ß√µes
  const extractPatientInfo = (text: string): string => {
    const patterns = [/paciente.*?(\d+\s*anos?)/i, /nome.*?([A-Za-z\s]+)/i, /idade.*?(\d+)/i]

    let info = ""
    patterns.forEach((pattern) => {
      const match = text.match(pattern)
      if (match) info += match[0] + ". "
    })

    return info || "Informa√ß√µes do paciente mencionadas na conversa."
  }

  const extractMainComplaint = (text: string): string => {
    const keywords = [
      "dor",
      "febre",
      "tosse",
      "falta de ar",
      "n√°usea",
      "v√¥mito",
      "diarreia",
      "constipa√ß√£o",
      "cefaleia",
      "tontura",
      "fraqueza",
      "cansa√ßo",
      "mal estar",
      "desconforto",
    ]
    const sentences = text.split(/[.!?]/)

    for (const sentence of sentences) {
      for (const keyword of keywords) {
        if (sentence.includes(keyword)) {
          return sentence.trim() + "."
        }
      }
    }

    return "Queixa principal identificada na conversa."
  }

  const extractCurrentIllness = (text: string): string => {
    const timeKeywords = ["h√°", "desde", "come√ßou", "iniciou", "dias", "semanas", "meses", "anos"]
    const sentences = text.split(/[.!?]/)

    const relevantSentences = []
    for (const sentence of sentences) {
      for (const keyword of timeKeywords) {
        if (sentence.includes(keyword)) {
          relevantSentences.push(sentence.trim())
          break
        }
      }
    }

    return relevantSentences.join(". ") || "Hist√≥ria da doen√ßa atual relatada na consulta."
  }

  const extractMedicalHistory = (text: string): string => {
    const keywords = [
      "cirurgia",
      "opera√ß√£o",
      "interna√ß√£o",
      "medicamento",
      "rem√©dio",
      "alergia",
      "diabetes",
      "hipertens√£o",
      "press√£o alta",
      "colesterol",
      "tratamento",
    ]
    const sentences = text.split(/[.!?]/)

    const relevantSentences = []
    for (const sentence of sentences) {
      for (const keyword of keywords) {
        if (sentence.includes(keyword)) {
          relevantSentences.push(sentence.trim())
          break
        }
      }
    }

    return relevantSentences.join(". ") || "Hist√≥ria m√©dica pregressa mencionada."
  }

  const extractFamilyHistory = (text: string): string => {
    const keywords = ["pai", "m√£e", "irm√£o", "irm√£", "av√¥", "av√≥", "fam√≠lia", "familiar", "heredit√°rio", "gen√©tico"]
    const sentences = text.split(/[.!?]/)

    const relevantSentences = []
    for (const sentence of sentences) {
      for (const keyword of keywords) {
        if (sentence.includes(keyword)) {
          relevantSentences.push(sentence.trim())
          break
        }
      }
    }

    return relevantSentences.join(". ") || "Hist√≥ria familiar relatada na consulta."
  }

  const extractPhysicalExam = (text: string): string => {
    const keywords = [
      "ausculta",
      "palpa√ß√£o",
      "inspe√ß√£o",
      "press√£o",
      "temperatura",
      "pulso",
      "respira√ß√£o",
      "exame",
      "batimentos",
      "sopro",
      "ru√≠do",
      "abdome",
      "t√≥rax",
      "cora√ß√£o",
    ]
    const sentences = text.split(/[.!?]/)

    const relevantSentences = []
    for (const sentence of sentences) {
      for (const keyword of keywords) {
        if (sentence.includes(keyword)) {
          relevantSentences.push(sentence.trim())
          break
        }
      }
    }

    return relevantSentences.join(". ") || "Exame f√≠sico realizado durante a consulta."
  }

  const extractSymptoms = (text: string): string => {
    const symptoms = [
      "dor",
      "febre",
      "tosse",
      "falta de ar",
      "n√°usea",
      "v√¥mito",
      "diarreia",
      "cefaleia",
      "tontura",
      "fraqueza",
      "cansa√ßo",
      "ins√¥nia",
      "perda de peso",
    ]
    const foundSymptoms = []

    for (const symptom of symptoms) {
      if (text.includes(symptom)) {
        foundSymptoms.push(symptom)
      }
    }

    return foundSymptoms.length > 0
      ? `Sintomas identificados: ${foundSymptoms.join(", ")}.`
      : "Sintomas relatados na consulta."
  }

  const extractRelevantText = (text: string, sectionKey: string): string => {
    // Extra√ß√£o gen√©rica baseada na proximidade de palavras-chave
    const sentences = text.split(/[.!?]/)
    const keywords = sectionKey.split(" ")

    for (const sentence of sentences) {
      for (const keyword of keywords) {
        if (sentence.includes(keyword)) {
          return sentence.trim() + "."
        }
      }
    }

    return `Informa√ß√µes sobre ${sectionKey} mencionadas na consulta.`
  }

  // Formatar anamnese estruturada
  const formatAnamnesis = (data: AnamnesisData, template: AnamnesisTemplate): string => {
    let formatted = `ANAMNESE - ${template.name.toUpperCase()}\n`
    formatted += `Data: ${new Date().toLocaleDateString("pt-BR")}\n`
    formatted += `Hora: ${new Date().toLocaleTimeString("pt-BR")}\n\n`

    template.sections.forEach((section, index) => {
      formatted += `${index + 1}. ${section.toUpperCase()}\n`
      formatted += `${data[section] || "N√£o relatado."}\n\n`
    })

    return formatted
  }

  // Fun√ß√µes para gerenciar templates customizados
  const saveCustomTemplate = () => {
    if (!newTemplateName.trim() || newTemplateSections.filter((s) => s.trim()).length === 0) {
      alert("Preencha o nome e pelo menos uma se√ß√£o do template.")
      return
    }

    const newTemplate: AnamnesisTemplate = {
      id: `custom_${Date.now()}`,
      name: newTemplateName.trim(),
      description: newTemplateDescription.trim() || "Template personalizado",
      sections: newTemplateSections.filter((s) => s.trim()).map((s) => s.trim()),
      isCustom: true,
    }

    let updatedTemplates
    if (editingTemplate) {
      // Editando template existente
      updatedTemplates = anamnesisTemplates.map((t) =>
        t.id === editingTemplate.id ? { ...newTemplate, id: editingTemplate.id } : t,
      )
    } else {
      // Criando novo template
      updatedTemplates = [...anamnesisTemplates, newTemplate]
    }

    setAnamnesisTemplates(updatedTemplates)

    // Salvar templates customizados no localStorage
    const customTemplates = updatedTemplates.filter((t) => t.isCustom)
    localStorage.setItem("custom-anamnesis-templates", JSON.stringify(customTemplates))

    // Resetar formul√°rio
    setNewTemplateName("")
    setNewTemplateDescription("")
    setNewTemplateSections([""])
    setShowTemplateEditor(false)
    setEditingTemplate(null)

    alert(editingTemplate ? "Template atualizado com sucesso!" : "Template criado com sucesso!")
  }

  const editTemplate = (template: AnamnesisTemplate) => {
    if (!template.isCustom) {
      alert("Apenas templates personalizados podem ser editados.")
      return
    }

    setEditingTemplate(template)
    setNewTemplateName(template.name)
    setNewTemplateDescription(template.description)
    setNewTemplateSections([...template.sections, ""])
    setShowTemplateEditor(true)
  }

  const deleteTemplate = (templateId: string) => {
    const template = anamnesisTemplates.find((t) => t.id === templateId)
    if (!template?.isCustom) {
      alert("Apenas templates personalizados podem ser exclu√≠dos.")
      return
    }

    if (confirm("Tem certeza que deseja excluir este template?")) {
      const updatedTemplates = anamnesisTemplates.filter((t) => t.id !== templateId)
      setAnamnesisTemplates(updatedTemplates)

      // Atualizar localStorage
      const customTemplates = updatedTemplates.filter((t) => t.isCustom)
      localStorage.setItem("custom-anamnesis-templates", JSON.stringify(customTemplates))

      // Se estava selecionado, desselecionar
      if (selectedTemplate?.id === templateId) {
        setSelectedTemplate(null)
      }

      alert("Template exclu√≠do com sucesso!")
    }
  }

  const addSection = () => {
    setNewTemplateSections([...newTemplateSections, ""])
  }

  const updateSection = (index: number, value: string) => {
    const updated = [...newTemplateSections]
    updated[index] = value
    setNewTemplateSections(updated)
  }

  const removeSection = (index: number) => {
    if (newTemplateSections.length > 1) {
      const updated = newTemplateSections.filter((_, i) => i !== index)
      setNewTemplateSections(updated)
    }
  }

  const startListening = async () => {
    if (!recognitionRef.current || !isSupported) return

    try {
      await navigator.mediaDevices.getUserMedia({ audio: true })
      recognitionRef.current.start()
      setIsPaused(false)
    } catch (err) {
      setError("Permiss√£o do microfone negada ou n√£o dispon√≠vel")
      console.error("Erro ao acessar microfone:", err)
    }
  }

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop()
    }
  }

  const pauseListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop()
      setIsPaused(true)
    }
  }

  const resumeListening = () => {
    if (isPaused) {
      startListening()
    }
  }

  const clearTranscript = () => {
    setTranscript("")
    setInterimTranscript("")
    setAnamnesisData({})
    setFormattedAnamnesis("")
  }

  const copyToClipboard = async () => {
    const textToCopy = anamnesisMode ? formattedAnamnesis : transcript
    try {
      await navigator.clipboard.writeText(textToCopy)
      alert("Texto copiado para a √°rea de transfer√™ncia!")
    } catch (err) {
      console.error("Erro ao copiar:", err)
    }
  }

  const downloadTranscript = () => {
    const content = anamnesisMode ? formattedAnamnesis : transcript
    const filename = anamnesisMode
      ? `anamnese-${selectedTemplate?.id}-${new Date().toISOString().split("T")[0]}.txt`
      : `transcricao-${new Date().toISOString().split("T")[0]}.txt`

    const element = document.createElement("a")
    const file = new Blob([content], { type: "text/plain" })
    element.href = URL.createObjectURL(file)
    element.download = filename
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  const saveTranscript = () => {
    const savedTranscripts = JSON.parse(localStorage.getItem("voice-transcripts") || "[]")
    const newTranscript = {
      id: Date.now(),
      content: anamnesisMode ? formattedAnamnesis : transcript,
      date: new Date().toISOString(),
      title: anamnesisMode
        ? `Anamnese ${selectedTemplate?.name} ${new Date().toLocaleDateString("pt-BR")}`
        : `Transcri√ß√£o ${new Date().toLocaleDateString("pt-BR")}`,
      type: anamnesisMode ? "anamnesis" : "transcription",
      template: selectedTemplate?.id,
    }

    savedTranscripts.push(newTranscript)
    localStorage.setItem("voice-transcripts", JSON.stringify(savedTranscripts))
    alert(anamnesisMode ? "Anamnese salva com sucesso!" : "Transcri√ß√£o salva com sucesso!")
  }

  if (!isSupported) {
    return (
      <Card className="w-full max-w-4xl mx-auto">
        <CardContent className="p-6 text-center">
          <div className="text-red-500 mb-4">
            <MicOff className="w-12 h-12 mx-auto mb-2" />
            <h3 className="text-lg font-semibold">Recurso n√£o suportado</h3>
            <p className="text-sm text-gray-600 mt-2">
              Seu navegador n√£o suporta reconhecimento de voz. Recomendamos usar Chrome, Edge ou Safari.
            </p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="w-full max-w-6xl mx-auto space-y-6">
      {/* Sele√ß√£o de Modo */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Stethoscope className="w-5 h-5" />
            Modo de Transcri√ß√£o
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4 mb-4">
            <Button
              variant={!anamnesisMode ? "default" : "outline"}
              onClick={() => {
                setAnamnesisMode(false)
                setSelectedTemplate(null)
                setFormattedAnamnesis("")
                setAnamnesisData({})
              }}
              className="flex items-center gap-2"
            >
              <Volume2 className="w-4 h-4" />
              Transcri√ß√£o Livre
            </Button>
            <Button
              variant={anamnesisMode ? "default" : "outline"}
              onClick={() => setAnamnesisMode(true)}
              className="flex items-center gap-2"
            >
              <FileText className="w-4 h-4" />
              Anamnese M√©dica
            </Button>
          </div>

          {/* Sele√ß√£o de Template de Anamnese */}
          {anamnesisMode && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h4 className="font-semibold text-gray-900">Selecione o tipo de anamnese:</h4>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowTemplateEditor(true)}
                  className="flex items-center gap-2"
                >
                  <Plus className="w-4 h-4" />
                  Criar Template
                </Button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {anamnesisTemplates.map((template) => (
                  <Card
                    key={template.id}
                    className={`cursor-pointer transition-all ${
                      selectedTemplate?.id === template.id
                        ? "border-blue-500 bg-blue-50"
                        : "border-gray-200 hover:border-gray-300"
                    }`}
                    onClick={() => setSelectedTemplate(template)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h5 className="font-semibold text-gray-900 mb-2 flex items-center gap-2">
                            {template.name}
                            {template.isCustom && (
                              <Badge variant="secondary" className="text-xs">
                                Personalizado
                              </Badge>
                            )}
                          </h5>
                          <p className="text-sm text-gray-600 mb-3">{template.description}</p>
                          <div className="text-xs text-gray-500">{template.sections.length} se√ß√µes inclu√≠das</div>
                        </div>
                        {template.isCustom && (
                          <div className="flex gap-1 ml-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation()
                                editTemplate(template)
                              }}
                              className="h-8 w-8 p-0"
                            >
                              <Edit className="w-3 h-3" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation()
                                deleteTemplate(template.id)
                              }}
                              className="h-8 w-8 p-0 text-red-500 hover:text-red-700"
                            >
                              <X className="w-3 h-3" />
                            </Button>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Editor de Template */}
      {showTemplateEditor && (
        <Card className="border-blue-200 bg-blue-50">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <Plus className="w-5 h-5" />
                {editingTemplate ? "Editar Template" : "Criar Novo Template"}
              </CardTitle>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => {
                  setShowTemplateEditor(false)
                  setEditingTemplate(null)
                  setNewTemplateName("")
                  setNewTemplateDescription("")
                  setNewTemplateSections([""])
                }}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Nome do Template</label>
                <input
                  type="text"
                  value={newTemplateName}
                  onChange={(e) => setNewTemplateName(e.target.value)}
                  placeholder="Ex: Anamnese Neurol√≥gica"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Descri√ß√£o</label>
                <input
                  type="text"
                  value={newTemplateDescription}
                  onChange={(e) => setNewTemplateDescription(e.target.value)}
                  placeholder="Breve descri√ß√£o do template"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="block text-sm font-medium text-gray-700">Se√ß√µes da Anamnese</label>
                <Button variant="outline" size="sm" onClick={addSection}>
                  <Plus className="w-4 h-4 mr-1" />
                  Adicionar Se√ß√£o
                </Button>
              </div>
              <div className="space-y-2 max-h-60 overflow-y-auto">
                {newTemplateSections.map((section, index) => (
                  <div key={index} className="flex gap-2">
                    <input
                      type="text"
                      value={section}
                      onChange={(e) => updateSection(index, e.target.value)}
                      placeholder={`Se√ß√£o ${index + 1}`}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    {newTemplateSections.length > 1 && (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => removeSection(index)}
                        className="text-red-500 hover:text-red-700"
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    )}
                  </div>
                ))}
              </div>
            </div>

            <div className="flex gap-2 pt-4">
              <Button onClick={saveCustomTemplate} className="flex items-center gap-2">
                <Save className="w-4 h-4" />
                {editingTemplate ? "Atualizar Template" : "Salvar Template"}
              </Button>
              <Button
                variant="outline"
                onClick={() => {
                  setShowTemplateEditor(false)
                  setEditingTemplate(null)
                  setNewTemplateName("")
                  setNewTemplateDescription("")
                  setNewTemplateSections([""])
                }}
              >
                Cancelar
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Header com controles principais */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              {anamnesisMode ? (
                <Stethoscope className="w-6 h-6 text-blue-600" />
              ) : (
                <Volume2 className="w-6 h-6 text-blue-600" />
              )}
              <div>
                <CardTitle>
                  {anamnesisMode ? "Transcri√ß√£o para Anamnese M√©dica" : "Transcri√ß√£o de √Åudio em Tempo Real"}
                </CardTitle>
                <p className="text-sm text-gray-600">
                  {anamnesisMode
                    ? "Capture a conversa m√©dico-paciente e gere anamnese estruturada automaticamente"
                    : "Habilite o microfone para transcrever automaticamente o que est√° sendo falado"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-2">
              {isListening && (
                <Badge className="bg-red-500 animate-pulse">
                  <div className="w-2 h-2 bg-white rounded-full mr-2"></div>
                  Gravando
                </Badge>
              )}
              {isPaused && <Badge className="bg-yellow-500">Pausado</Badge>}
              {anamnesisMode && selectedTemplate && <Badge className="bg-green-500">{selectedTemplate.name}</Badge>}
              {isProcessingAnamnesis && <Badge className="bg-blue-500 animate-pulse">Processando NLP</Badge>}
            </div>
          </div>
        </CardHeader>

        <CardContent className="space-y-4">
          {/* Aviso para anamnese */}
          {anamnesisMode && !selectedTemplate && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
              <p className="text-yellow-800 text-sm">
                ‚ö†Ô∏è Selecione um modelo de anamnese antes de iniciar a transcri√ß√£o.
              </p>
            </div>
          )}

          {/* Controles de grava√ß√£o */}
          <div className="flex items-center gap-3">
            {!isListening && !isPaused && (
              <Button
                onClick={startListening}
                className="bg-green-600 hover:bg-green-700 flex items-center gap-2"
                disabled={anamnesisMode && !selectedTemplate}
              >
                <Mic className="w-4 h-4" />
                {anamnesisMode ? "Iniciar Consulta" : "Iniciar Transcri√ß√£o"}
              </Button>
            )}

            {isListening && (
              <>
                <Button onClick={pauseListening} className="bg-yellow-600 hover:bg-yellow-700 flex items-center gap-2">
                  <Pause className="w-4 h-4" />
                  Pausar
                </Button>

                <Button onClick={stopListening} className="bg-red-600 hover:bg-red-700 flex items-center gap-2">
                  <MicOff className="w-4 h-4" />
                  Parar
                </Button>
              </>
            )}

            {isPaused && (
              <Button onClick={resumeListening} className="bg-blue-600 hover:bg-blue-700 flex items-center gap-2">
                <Play className="w-4 h-4" />
                Retomar
              </Button>
            )}

            {/* Configura√ß√µes */}
            <div className="flex items-center gap-2 ml-auto">
              <select
                value={settings.language}
                onChange={(e) => setSettings({ ...settings, language: e.target.value })}
                className="px-3 py-1 border rounded-md text-sm"
                disabled={isListening}
              >
                <option value="pt-BR">Portugu√™s (Brasil)</option>
                <option value="en-US">English (US)</option>
                <option value="es-ES">Espa√±ol</option>
                <option value="fr-FR">Fran√ßais</option>
              </select>
            </div>
          </div>

          {/* Mensagem de erro */}
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-red-800 text-sm">{error}</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* √Årea de transcri√ß√£o */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Transcri√ß√£o Original */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg">{anamnesisMode ? "Conversa Capturada" : "Texto Transcrito"}</CardTitle>
              <div className="flex items-center gap-2">
                <Button variant="outline" size="sm" onClick={clearTranscript} disabled={!transcript}>
                  <Trash2 className="w-4 h-4 mr-1" />
                  Limpar
                </Button>
              </div>
            </div>
          </CardHeader>

          <CardContent>
            <div className="relative">
              <Textarea
                ref={textareaRef}
                value={transcript + interimTranscript}
                onChange={(e) => setTranscript(e.target.value)}
                placeholder={
                  anamnesisMode
                    ? "A conversa m√©dico-paciente aparecer√° aqui (ru√≠dos filtrados automaticamente)..."
                    : "A transcri√ß√£o aparecer√° aqui em tempo real..."
                }
                className="min-h-[400px] text-base leading-relaxed resize-none"
                style={{
                  fontSize: "16px",
                  lineHeight: "1.6",
                }}
              />

              {/* Indicador de texto tempor√°rio */}
              {interimTranscript && (
                <div className="absolute bottom-4 right-4 bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                  Processando...
                </div>
              )}
            </div>

            {/* Estat√≠sticas */}
            <div className="flex items-center justify-between mt-4 text-sm text-gray-600">
              <div>Palavras: {transcript.split(" ").filter((word) => word.length > 0).length}</div>
              <div>Caracteres: {transcript.length}</div>
              <div>√öltima atualiza√ß√£o: {transcript ? new Date().toLocaleTimeString("pt-BR") : "--:--:--"}</div>
            </div>
          </CardContent>
        </Card>

        {/* Anamnese Formatada */}
        {anamnesisMode && selectedTemplate && (
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg flex items-center gap-2">
                  <FileText className="w-5 h-5" />
                  Anamnese Estruturada
                </CardTitle>
                <div className="flex items-center gap-2">
                  <Button variant="outline" size="sm" onClick={copyToClipboard} disabled={!formattedAnamnesis}>
                    <Copy className="w-4 h-4 mr-1" />
                    Copiar
                  </Button>

                  <Button variant="outline" size="sm" onClick={saveTranscript} disabled={!formattedAnamnesis}>
                    <Save className="w-4 h-4 mr-1" />
                    Salvar
                  </Button>

                  <Button variant="outline" size="sm" onClick={downloadTranscript} disabled={!formattedAnamnesis}>
                    <Download className="w-4 h-4 mr-1" />
                    Download
                  </Button>
                </div>
              </div>
            </CardHeader>

            <CardContent>
              <div className="relative">
                <Textarea
                  value={formattedAnamnesis}
                  onChange={(e) => setFormattedAnamnesis(e.target.value)}
                  placeholder="A anamnese estruturada ser√° gerada automaticamente conforme a conversa √© transcrita..."
                  className="min-h-[400px] text-sm leading-relaxed resize-none font-mono"
                  style={{
                    fontSize: "14px",
                    lineHeight: "1.5",
                  }}
                />

                {isProcessingAnamnesis && (
                  <div className="absolute bottom-4 right-4 bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                    Processando com NLP...
                  </div>
                )}
              </div>

              {/* Progresso das se√ß√µes */}
              {selectedTemplate && Object.keys(anamnesisData).length > 0 && (
                <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                  <h5 className="text-sm font-semibold text-gray-700 mb-2">Se√ß√µes Identificadas:</h5>
                  <div className="flex flex-wrap gap-1">
                    {selectedTemplate.sections.map((section) => (
                      <Badge
                        key={section}
                        variant={anamnesisData[section] ? "default" : "secondary"}
                        className="text-xs"
                      >
                        {section}
                      </Badge>
                    ))}
                  </div>
                  <p className="text-xs text-gray-600 mt-2">
                    {Object.keys(anamnesisData).length} de {selectedTemplate.sections.length} se√ß√µes preenchidas
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>

      {/* Dicas de uso */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="p-4">
          <h4 className="font-semibold text-blue-900 mb-2">
            üí° {anamnesisMode ? "Dicas para anamnese m√©dica:" : "Dicas para melhor transcri√ß√£o:"}
          </h4>
          <ul className="text-sm text-blue-800 space-y-1">
            {anamnesisMode ? (
              <>
                <li>‚Ä¢ Selecione ou crie o modelo de anamnese adequado antes de iniciar</li>
                <li>‚Ä¢ Fale de forma clara durante a consulta</li>
                <li>‚Ä¢ Mencione explicitamente as se√ß√µes (ex: "hist√≥ria familiar", "exame f√≠sico")</li>
                <li>‚Ä¢ O sistema filtra automaticamente ru√≠dos e informa√ß√µes irrelevantes</li>
                <li>‚Ä¢ Revise e edite a anamnese gerada conforme necess√°rio</li>
                <li>‚Ä¢ Use em ambiente silencioso para melhor precis√£o</li>
                <li>‚Ä¢ Crie templates personalizados para suas especialidades</li>
              </>
            ) : (
              <>
                <li>‚Ä¢ Fale de forma clara e pausada</li>
                <li>‚Ä¢ Mantenha o microfone pr√≥ximo (30-50cm)</li>
                <li>‚Ä¢ Evite ru√≠dos de fundo</li>
                <li>‚Ä¢ Use fones de ouvido para evitar eco</li>
                <li>‚Ä¢ A transcri√ß√£o funciona melhor em ambientes silenciosos</li>
                <li>‚Ä¢ O sistema filtra automaticamente palavras irrelevantes</li>
              </>
            )}
          </ul>
        </CardContent>
      </Card>
    </div>
  )
}
